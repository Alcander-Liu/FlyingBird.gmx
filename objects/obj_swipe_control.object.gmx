<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swipe Control Init
MouseX = 0;
MouseY = 0;
MouseXStart = 0;
MouseYStart = 0;


Swipe = false;
SwipeTime = 0;
SwipeSpeed = 0;
min_swipeSpeed = global.min_swipeSpeed; //const
max_swipeDistance = global.max_swipeDistance; //const
swipe_triggered_distance = global.swipe_triggered_distance;
bird_hor_speed = global.bird_hor_speed;

PD = 0;  //Point of Direction
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swipe Action Individualy
if(global.pause)
{
    exit;
}


if (device_mouse_check_button_pressed(0, mb_left))
    {
    show_debug_message("mouse pressed.");
    Swipe = true;
    MouseXStart = mouse_x;
    MouseYStart = mouse_y;
    }

if (Swipe == true)
{
    MouseX = mouse_x;
    MouseY = mouse_y;
    SwipeTime++;
    PD = point_direction(MouseXStart, MouseYStart, MouseX, MouseY);
    SwipeDistance = point_distance(MouseXStart, MouseYStart, MouseX, MouseY);
    SwipeSpeed = SwipeDistance/SwipeTime;
    
    if (device_mouse_check_button_released(0, mb_left))
    {
        show_debug_message("mouse released");
        Swipe = false;
        SwipeTime = 0;
    }
    if (SwipeDistance &gt; swipe_triggered_distance) and (SwipeSpeed &gt; min_swipeSpeed)
    {
        Swipe = false;
        SwipeTime = 0;
        show_debug_message(SwipeSpeed);
        show_debug_message(SwipeDistance);
        {
            if ((PD &gt; 315) or (PD &lt; 45)) //Right
            {
             // code is executed for swiping right // 
                 with(obj_bird)
                 {
                    swipe_dir = 1; // right
                    show_debug_message("move right.");
                    hspeed += bird_hor_speed;
                    //sprite_index = spr_bird_right;
                    alarm[2] = bird_moving_distance / bird_hor_speed;
                    instance_deactivate_object(obj_swipe_control);
                 }
            } 
            else if ((PD &gt; 45) and (PD &lt; 135)) //Up
                        and (SwipeSpeed &gt; 4.5)
            {
                // code is executed for swiping up //   
            } 
            else if ((PD &gt; 135) and (PD &lt; 225)) //Left
            {
                // code is executed for swiping left // 
                with(obj_bird)
                {
                    swipe_dir = -1; // right
                    show_debug_message("move left.");
                    hspeed -= bird_hor_speed;
                    //sprite_index = spr_bird_left;
                    alarm[2] = bird_moving_distance / bird_hor_speed;
                    instance_deactivate_object(obj_swipe_control);
                }
            } 
            else if ((PD &gt; 225) and (PD &lt; 315)) //Down
                    and (SwipeSpeed &gt; 4.5)
            {
                // code is executed for swiping down //       
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
